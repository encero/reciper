// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/encero/reciper/ent/migrate"
	"github.com/google/uuid"

	"github.com/encero/reciper/ent/cookinghistory"
	"github.com/encero/reciper/ent/recipe"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CookingHistory is the client for interacting with the CookingHistory builders.
	CookingHistory *CookingHistoryClient
	// Recipe is the client for interacting with the Recipe builders.
	Recipe *RecipeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CookingHistory = NewCookingHistoryClient(c.config)
	c.Recipe = NewRecipeClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		CookingHistory: NewCookingHistoryClient(cfg),
		Recipe:         NewRecipeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		CookingHistory: NewCookingHistoryClient(cfg),
		Recipe:         NewRecipeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CookingHistory.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CookingHistory.Use(hooks...)
	c.Recipe.Use(hooks...)
}

// CookingHistoryClient is a client for the CookingHistory schema.
type CookingHistoryClient struct {
	config
}

// NewCookingHistoryClient returns a client for the CookingHistory from the given config.
func NewCookingHistoryClient(c config) *CookingHistoryClient {
	return &CookingHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cookinghistory.Hooks(f(g(h())))`.
func (c *CookingHistoryClient) Use(hooks ...Hook) {
	c.hooks.CookingHistory = append(c.hooks.CookingHistory, hooks...)
}

// Create returns a create builder for CookingHistory.
func (c *CookingHistoryClient) Create() *CookingHistoryCreate {
	mutation := newCookingHistoryMutation(c.config, OpCreate)
	return &CookingHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CookingHistory entities.
func (c *CookingHistoryClient) CreateBulk(builders ...*CookingHistoryCreate) *CookingHistoryCreateBulk {
	return &CookingHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CookingHistory.
func (c *CookingHistoryClient) Update() *CookingHistoryUpdate {
	mutation := newCookingHistoryMutation(c.config, OpUpdate)
	return &CookingHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CookingHistoryClient) UpdateOne(ch *CookingHistory) *CookingHistoryUpdateOne {
	mutation := newCookingHistoryMutation(c.config, OpUpdateOne, withCookingHistory(ch))
	return &CookingHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CookingHistoryClient) UpdateOneID(id uuid.UUID) *CookingHistoryUpdateOne {
	mutation := newCookingHistoryMutation(c.config, OpUpdateOne, withCookingHistoryID(id))
	return &CookingHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CookingHistory.
func (c *CookingHistoryClient) Delete() *CookingHistoryDelete {
	mutation := newCookingHistoryMutation(c.config, OpDelete)
	return &CookingHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CookingHistoryClient) DeleteOne(ch *CookingHistory) *CookingHistoryDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CookingHistoryClient) DeleteOneID(id uuid.UUID) *CookingHistoryDeleteOne {
	builder := c.Delete().Where(cookinghistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CookingHistoryDeleteOne{builder}
}

// Query returns a query builder for CookingHistory.
func (c *CookingHistoryClient) Query() *CookingHistoryQuery {
	return &CookingHistoryQuery{
		config: c.config,
	}
}

// Get returns a CookingHistory entity by its id.
func (c *CookingHistoryClient) Get(ctx context.Context, id uuid.UUID) (*CookingHistory, error) {
	return c.Query().Where(cookinghistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CookingHistoryClient) GetX(ctx context.Context, id uuid.UUID) *CookingHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecipe queries the recipe edge of a CookingHistory.
func (c *CookingHistoryClient) QueryRecipe(ch *CookingHistory) *RecipeQuery {
	query := &RecipeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cookinghistory.Table, cookinghistory.FieldID, id),
			sqlgraph.To(recipe.Table, recipe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cookinghistory.RecipeTable, cookinghistory.RecipeColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CookingHistoryClient) Hooks() []Hook {
	return c.hooks.CookingHistory
}

// RecipeClient is a client for the Recipe schema.
type RecipeClient struct {
	config
}

// NewRecipeClient returns a client for the Recipe from the given config.
func NewRecipeClient(c config) *RecipeClient {
	return &RecipeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recipe.Hooks(f(g(h())))`.
func (c *RecipeClient) Use(hooks ...Hook) {
	c.hooks.Recipe = append(c.hooks.Recipe, hooks...)
}

// Create returns a create builder for Recipe.
func (c *RecipeClient) Create() *RecipeCreate {
	mutation := newRecipeMutation(c.config, OpCreate)
	return &RecipeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Recipe entities.
func (c *RecipeClient) CreateBulk(builders ...*RecipeCreate) *RecipeCreateBulk {
	return &RecipeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Recipe.
func (c *RecipeClient) Update() *RecipeUpdate {
	mutation := newRecipeMutation(c.config, OpUpdate)
	return &RecipeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecipeClient) UpdateOne(r *Recipe) *RecipeUpdateOne {
	mutation := newRecipeMutation(c.config, OpUpdateOne, withRecipe(r))
	return &RecipeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecipeClient) UpdateOneID(id uuid.UUID) *RecipeUpdateOne {
	mutation := newRecipeMutation(c.config, OpUpdateOne, withRecipeID(id))
	return &RecipeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Recipe.
func (c *RecipeClient) Delete() *RecipeDelete {
	mutation := newRecipeMutation(c.config, OpDelete)
	return &RecipeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RecipeClient) DeleteOne(r *Recipe) *RecipeDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RecipeClient) DeleteOneID(id uuid.UUID) *RecipeDeleteOne {
	builder := c.Delete().Where(recipe.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecipeDeleteOne{builder}
}

// Query returns a query builder for Recipe.
func (c *RecipeClient) Query() *RecipeQuery {
	return &RecipeQuery{
		config: c.config,
	}
}

// Get returns a Recipe entity by its id.
func (c *RecipeClient) Get(ctx context.Context, id uuid.UUID) (*Recipe, error) {
	return c.Query().Where(recipe.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecipeClient) GetX(ctx context.Context, id uuid.UUID) *Recipe {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHistory queries the history edge of a Recipe.
func (c *RecipeClient) QueryHistory(r *Recipe) *CookingHistoryQuery {
	query := &CookingHistoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recipe.Table, recipe.FieldID, id),
			sqlgraph.To(cookinghistory.Table, cookinghistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, recipe.HistoryTable, recipe.HistoryColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecipeClient) Hooks() []Hook {
	return c.hooks.Recipe
}
