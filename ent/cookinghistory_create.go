// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/encero/reciper/ent/cookinghistory"
	"github.com/encero/reciper/ent/recipe"
	"github.com/google/uuid"
)

// CookingHistoryCreate is the builder for creating a CookingHistory entity.
type CookingHistoryCreate struct {
	config
	mutation *CookingHistoryMutation
	hooks    []Hook
}

// SetCookedAt sets the "cookedAt" field.
func (chc *CookingHistoryCreate) SetCookedAt(t time.Time) *CookingHistoryCreate {
	chc.mutation.SetCookedAt(t)
	return chc
}

// SetID sets the "id" field.
func (chc *CookingHistoryCreate) SetID(u uuid.UUID) *CookingHistoryCreate {
	chc.mutation.SetID(u)
	return chc
}

// SetRecipeID sets the "recipe" edge to the Recipe entity by ID.
func (chc *CookingHistoryCreate) SetRecipeID(id uuid.UUID) *CookingHistoryCreate {
	chc.mutation.SetRecipeID(id)
	return chc
}

// SetNillableRecipeID sets the "recipe" edge to the Recipe entity by ID if the given value is not nil.
func (chc *CookingHistoryCreate) SetNillableRecipeID(id *uuid.UUID) *CookingHistoryCreate {
	if id != nil {
		chc = chc.SetRecipeID(*id)
	}
	return chc
}

// SetRecipe sets the "recipe" edge to the Recipe entity.
func (chc *CookingHistoryCreate) SetRecipe(r *Recipe) *CookingHistoryCreate {
	return chc.SetRecipeID(r.ID)
}

// Mutation returns the CookingHistoryMutation object of the builder.
func (chc *CookingHistoryCreate) Mutation() *CookingHistoryMutation {
	return chc.mutation
}

// Save creates the CookingHistory in the database.
func (chc *CookingHistoryCreate) Save(ctx context.Context) (*CookingHistory, error) {
	var (
		err  error
		node *CookingHistory
	)
	if len(chc.hooks) == 0 {
		if err = chc.check(); err != nil {
			return nil, err
		}
		node, err = chc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CookingHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = chc.check(); err != nil {
				return nil, err
			}
			chc.mutation = mutation
			if node, err = chc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(chc.hooks) - 1; i >= 0; i-- {
			if chc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = chc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, chc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (chc *CookingHistoryCreate) SaveX(ctx context.Context) *CookingHistory {
	v, err := chc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (chc *CookingHistoryCreate) Exec(ctx context.Context) error {
	_, err := chc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chc *CookingHistoryCreate) ExecX(ctx context.Context) {
	if err := chc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (chc *CookingHistoryCreate) check() error {
	if _, ok := chc.mutation.CookedAt(); !ok {
		return &ValidationError{Name: "cookedAt", err: errors.New(`ent: missing required field "CookingHistory.cookedAt"`)}
	}
	return nil
}

func (chc *CookingHistoryCreate) sqlSave(ctx context.Context) (*CookingHistory, error) {
	_node, _spec := chc.createSpec()
	if err := sqlgraph.CreateNode(ctx, chc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (chc *CookingHistoryCreate) createSpec() (*CookingHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &CookingHistory{config: chc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cookinghistory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: cookinghistory.FieldID,
			},
		}
	)
	if id, ok := chc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := chc.mutation.CookedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cookinghistory.FieldCookedAt,
		})
		_node.CookedAt = value
	}
	if nodes := chc.mutation.RecipeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cookinghistory.RecipeTable,
			Columns: []string{cookinghistory.RecipeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: recipe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.recipe_history = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CookingHistoryCreateBulk is the builder for creating many CookingHistory entities in bulk.
type CookingHistoryCreateBulk struct {
	config
	builders []*CookingHistoryCreate
}

// Save creates the CookingHistory entities in the database.
func (chcb *CookingHistoryCreateBulk) Save(ctx context.Context) ([]*CookingHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(chcb.builders))
	nodes := make([]*CookingHistory, len(chcb.builders))
	mutators := make([]Mutator, len(chcb.builders))
	for i := range chcb.builders {
		func(i int, root context.Context) {
			builder := chcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CookingHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, chcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, chcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, chcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (chcb *CookingHistoryCreateBulk) SaveX(ctx context.Context) []*CookingHistory {
	v, err := chcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (chcb *CookingHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := chcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chcb *CookingHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := chcb.Exec(ctx); err != nil {
		panic(err)
	}
}
