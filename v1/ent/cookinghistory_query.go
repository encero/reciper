// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/encero/reciper/ent/cookinghistory"
	"github.com/encero/reciper/ent/predicate"
	"github.com/encero/reciper/ent/recipe"
	"github.com/google/uuid"
)

// CookingHistoryQuery is the builder for querying CookingHistory entities.
type CookingHistoryQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.CookingHistory
	// eager-loading edges.
	withRecipe *RecipeQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CookingHistoryQuery builder.
func (chq *CookingHistoryQuery) Where(ps ...predicate.CookingHistory) *CookingHistoryQuery {
	chq.predicates = append(chq.predicates, ps...)
	return chq
}

// Limit adds a limit step to the query.
func (chq *CookingHistoryQuery) Limit(limit int) *CookingHistoryQuery {
	chq.limit = &limit
	return chq
}

// Offset adds an offset step to the query.
func (chq *CookingHistoryQuery) Offset(offset int) *CookingHistoryQuery {
	chq.offset = &offset
	return chq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (chq *CookingHistoryQuery) Unique(unique bool) *CookingHistoryQuery {
	chq.unique = &unique
	return chq
}

// Order adds an order step to the query.
func (chq *CookingHistoryQuery) Order(o ...OrderFunc) *CookingHistoryQuery {
	chq.order = append(chq.order, o...)
	return chq
}

// QueryRecipe chains the current query on the "recipe" edge.
func (chq *CookingHistoryQuery) QueryRecipe() *RecipeQuery {
	query := &RecipeQuery{config: chq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := chq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := chq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(cookinghistory.Table, cookinghistory.FieldID, selector),
			sqlgraph.To(recipe.Table, recipe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cookinghistory.RecipeTable, cookinghistory.RecipeColumn),
		)
		fromU = sqlgraph.SetNeighbors(chq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CookingHistory entity from the query.
// Returns a *NotFoundError when no CookingHistory was found.
func (chq *CookingHistoryQuery) First(ctx context.Context) (*CookingHistory, error) {
	nodes, err := chq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{cookinghistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (chq *CookingHistoryQuery) FirstX(ctx context.Context) *CookingHistory {
	node, err := chq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CookingHistory ID from the query.
// Returns a *NotFoundError when no CookingHistory ID was found.
func (chq *CookingHistoryQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = chq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{cookinghistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (chq *CookingHistoryQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := chq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CookingHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CookingHistory entity is found.
// Returns a *NotFoundError when no CookingHistory entities are found.
func (chq *CookingHistoryQuery) Only(ctx context.Context) (*CookingHistory, error) {
	nodes, err := chq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{cookinghistory.Label}
	default:
		return nil, &NotSingularError{cookinghistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (chq *CookingHistoryQuery) OnlyX(ctx context.Context) *CookingHistory {
	node, err := chq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CookingHistory ID in the query.
// Returns a *NotSingularError when more than one CookingHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (chq *CookingHistoryQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = chq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{cookinghistory.Label}
	default:
		err = &NotSingularError{cookinghistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (chq *CookingHistoryQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := chq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CookingHistories.
func (chq *CookingHistoryQuery) All(ctx context.Context) ([]*CookingHistory, error) {
	if err := chq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return chq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (chq *CookingHistoryQuery) AllX(ctx context.Context) []*CookingHistory {
	nodes, err := chq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CookingHistory IDs.
func (chq *CookingHistoryQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := chq.Select(cookinghistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (chq *CookingHistoryQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := chq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (chq *CookingHistoryQuery) Count(ctx context.Context) (int, error) {
	if err := chq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return chq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (chq *CookingHistoryQuery) CountX(ctx context.Context) int {
	count, err := chq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (chq *CookingHistoryQuery) Exist(ctx context.Context) (bool, error) {
	if err := chq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return chq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (chq *CookingHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := chq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CookingHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (chq *CookingHistoryQuery) Clone() *CookingHistoryQuery {
	if chq == nil {
		return nil
	}
	return &CookingHistoryQuery{
		config:     chq.config,
		limit:      chq.limit,
		offset:     chq.offset,
		order:      append([]OrderFunc{}, chq.order...),
		predicates: append([]predicate.CookingHistory{}, chq.predicates...),
		withRecipe: chq.withRecipe.Clone(),
		// clone intermediate query.
		sql:    chq.sql.Clone(),
		path:   chq.path,
		unique: chq.unique,
	}
}

// WithRecipe tells the query-builder to eager-load the nodes that are connected to
// the "recipe" edge. The optional arguments are used to configure the query builder of the edge.
func (chq *CookingHistoryQuery) WithRecipe(opts ...func(*RecipeQuery)) *CookingHistoryQuery {
	query := &RecipeQuery{config: chq.config}
	for _, opt := range opts {
		opt(query)
	}
	chq.withRecipe = query
	return chq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CookedAt time.Time `json:"cookedAt,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CookingHistory.Query().
//		GroupBy(cookinghistory.FieldCookedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (chq *CookingHistoryQuery) GroupBy(field string, fields ...string) *CookingHistoryGroupBy {
	group := &CookingHistoryGroupBy{config: chq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := chq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return chq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CookedAt time.Time `json:"cookedAt,omitempty"`
//	}
//
//	client.CookingHistory.Query().
//		Select(cookinghistory.FieldCookedAt).
//		Scan(ctx, &v)
func (chq *CookingHistoryQuery) Select(fields ...string) *CookingHistorySelect {
	chq.fields = append(chq.fields, fields...)
	return &CookingHistorySelect{CookingHistoryQuery: chq}
}

func (chq *CookingHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, f := range chq.fields {
		if !cookinghistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if chq.path != nil {
		prev, err := chq.path(ctx)
		if err != nil {
			return err
		}
		chq.sql = prev
	}
	return nil
}

func (chq *CookingHistoryQuery) sqlAll(ctx context.Context) ([]*CookingHistory, error) {
	var (
		nodes       = []*CookingHistory{}
		withFKs     = chq.withFKs
		_spec       = chq.querySpec()
		loadedTypes = [1]bool{
			chq.withRecipe != nil,
		}
	)
	if chq.withRecipe != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, cookinghistory.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &CookingHistory{config: chq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, chq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := chq.withRecipe; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*CookingHistory)
		for i := range nodes {
			if nodes[i].recipe_history == nil {
				continue
			}
			fk := *nodes[i].recipe_history
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(recipe.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "recipe_history" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Recipe = n
			}
		}
	}

	return nodes, nil
}

func (chq *CookingHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := chq.querySpec()
	_spec.Node.Columns = chq.fields
	if len(chq.fields) > 0 {
		_spec.Unique = chq.unique != nil && *chq.unique
	}
	return sqlgraph.CountNodes(ctx, chq.driver, _spec)
}

func (chq *CookingHistoryQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := chq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (chq *CookingHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cookinghistory.Table,
			Columns: cookinghistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: cookinghistory.FieldID,
			},
		},
		From:   chq.sql,
		Unique: true,
	}
	if unique := chq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := chq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cookinghistory.FieldID)
		for i := range fields {
			if fields[i] != cookinghistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := chq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := chq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := chq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := chq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (chq *CookingHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(chq.driver.Dialect())
	t1 := builder.Table(cookinghistory.Table)
	columns := chq.fields
	if len(columns) == 0 {
		columns = cookinghistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if chq.sql != nil {
		selector = chq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if chq.unique != nil && *chq.unique {
		selector.Distinct()
	}
	for _, p := range chq.predicates {
		p(selector)
	}
	for _, p := range chq.order {
		p(selector)
	}
	if offset := chq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := chq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CookingHistoryGroupBy is the group-by builder for CookingHistory entities.
type CookingHistoryGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (chgb *CookingHistoryGroupBy) Aggregate(fns ...AggregateFunc) *CookingHistoryGroupBy {
	chgb.fns = append(chgb.fns, fns...)
	return chgb
}

// Scan applies the group-by query and scans the result into the given value.
func (chgb *CookingHistoryGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := chgb.path(ctx)
	if err != nil {
		return err
	}
	chgb.sql = query
	return chgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (chgb *CookingHistoryGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := chgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (chgb *CookingHistoryGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(chgb.fields) > 1 {
		return nil, errors.New("ent: CookingHistoryGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := chgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (chgb *CookingHistoryGroupBy) StringsX(ctx context.Context) []string {
	v, err := chgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (chgb *CookingHistoryGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = chgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cookinghistory.Label}
	default:
		err = fmt.Errorf("ent: CookingHistoryGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (chgb *CookingHistoryGroupBy) StringX(ctx context.Context) string {
	v, err := chgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (chgb *CookingHistoryGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(chgb.fields) > 1 {
		return nil, errors.New("ent: CookingHistoryGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := chgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (chgb *CookingHistoryGroupBy) IntsX(ctx context.Context) []int {
	v, err := chgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (chgb *CookingHistoryGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = chgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cookinghistory.Label}
	default:
		err = fmt.Errorf("ent: CookingHistoryGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (chgb *CookingHistoryGroupBy) IntX(ctx context.Context) int {
	v, err := chgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (chgb *CookingHistoryGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(chgb.fields) > 1 {
		return nil, errors.New("ent: CookingHistoryGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := chgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (chgb *CookingHistoryGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := chgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (chgb *CookingHistoryGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = chgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cookinghistory.Label}
	default:
		err = fmt.Errorf("ent: CookingHistoryGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (chgb *CookingHistoryGroupBy) Float64X(ctx context.Context) float64 {
	v, err := chgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (chgb *CookingHistoryGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(chgb.fields) > 1 {
		return nil, errors.New("ent: CookingHistoryGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := chgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (chgb *CookingHistoryGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := chgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (chgb *CookingHistoryGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = chgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cookinghistory.Label}
	default:
		err = fmt.Errorf("ent: CookingHistoryGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (chgb *CookingHistoryGroupBy) BoolX(ctx context.Context) bool {
	v, err := chgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (chgb *CookingHistoryGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range chgb.fields {
		if !cookinghistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := chgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := chgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (chgb *CookingHistoryGroupBy) sqlQuery() *sql.Selector {
	selector := chgb.sql.Select()
	aggregation := make([]string, 0, len(chgb.fns))
	for _, fn := range chgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(chgb.fields)+len(chgb.fns))
		for _, f := range chgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(chgb.fields...)...)
}

// CookingHistorySelect is the builder for selecting fields of CookingHistory entities.
type CookingHistorySelect struct {
	*CookingHistoryQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (chs *CookingHistorySelect) Scan(ctx context.Context, v interface{}) error {
	if err := chs.prepareQuery(ctx); err != nil {
		return err
	}
	chs.sql = chs.CookingHistoryQuery.sqlQuery(ctx)
	return chs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (chs *CookingHistorySelect) ScanX(ctx context.Context, v interface{}) {
	if err := chs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (chs *CookingHistorySelect) Strings(ctx context.Context) ([]string, error) {
	if len(chs.fields) > 1 {
		return nil, errors.New("ent: CookingHistorySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := chs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (chs *CookingHistorySelect) StringsX(ctx context.Context) []string {
	v, err := chs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (chs *CookingHistorySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = chs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cookinghistory.Label}
	default:
		err = fmt.Errorf("ent: CookingHistorySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (chs *CookingHistorySelect) StringX(ctx context.Context) string {
	v, err := chs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (chs *CookingHistorySelect) Ints(ctx context.Context) ([]int, error) {
	if len(chs.fields) > 1 {
		return nil, errors.New("ent: CookingHistorySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := chs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (chs *CookingHistorySelect) IntsX(ctx context.Context) []int {
	v, err := chs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (chs *CookingHistorySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = chs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cookinghistory.Label}
	default:
		err = fmt.Errorf("ent: CookingHistorySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (chs *CookingHistorySelect) IntX(ctx context.Context) int {
	v, err := chs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (chs *CookingHistorySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(chs.fields) > 1 {
		return nil, errors.New("ent: CookingHistorySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := chs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (chs *CookingHistorySelect) Float64sX(ctx context.Context) []float64 {
	v, err := chs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (chs *CookingHistorySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = chs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cookinghistory.Label}
	default:
		err = fmt.Errorf("ent: CookingHistorySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (chs *CookingHistorySelect) Float64X(ctx context.Context) float64 {
	v, err := chs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (chs *CookingHistorySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(chs.fields) > 1 {
		return nil, errors.New("ent: CookingHistorySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := chs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (chs *CookingHistorySelect) BoolsX(ctx context.Context) []bool {
	v, err := chs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (chs *CookingHistorySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = chs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cookinghistory.Label}
	default:
		err = fmt.Errorf("ent: CookingHistorySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (chs *CookingHistorySelect) BoolX(ctx context.Context) bool {
	v, err := chs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (chs *CookingHistorySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := chs.sql.Query()
	if err := chs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
