// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/encero/reciper/ent/cookinghistory"
	"github.com/encero/reciper/ent/recipe"
	"github.com/google/uuid"
)

// CookingHistory is the model entity for the CookingHistory schema.
type CookingHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CookedAt holds the value of the "cookedAt" field.
	CookedAt time.Time `json:"cookedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CookingHistoryQuery when eager-loading is set.
	Edges          CookingHistoryEdges `json:"edges"`
	recipe_history *uuid.UUID
}

// CookingHistoryEdges holds the relations/edges for other nodes in the graph.
type CookingHistoryEdges struct {
	// Recipe holds the value of the recipe edge.
	Recipe *Recipe `json:"recipe,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RecipeOrErr returns the Recipe value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CookingHistoryEdges) RecipeOrErr() (*Recipe, error) {
	if e.loadedTypes[0] {
		if e.Recipe == nil {
			// The edge recipe was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: recipe.Label}
		}
		return e.Recipe, nil
	}
	return nil, &NotLoadedError{edge: "recipe"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CookingHistory) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cookinghistory.FieldCookedAt:
			values[i] = new(sql.NullTime)
		case cookinghistory.FieldID:
			values[i] = new(uuid.UUID)
		case cookinghistory.ForeignKeys[0]: // recipe_history
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type CookingHistory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CookingHistory fields.
func (ch *CookingHistory) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cookinghistory.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ch.ID = *value
			}
		case cookinghistory.FieldCookedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field cookedAt", values[i])
			} else if value.Valid {
				ch.CookedAt = value.Time
			}
		case cookinghistory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field recipe_history", values[i])
			} else if value.Valid {
				ch.recipe_history = new(uuid.UUID)
				*ch.recipe_history = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryRecipe queries the "recipe" edge of the CookingHistory entity.
func (ch *CookingHistory) QueryRecipe() *RecipeQuery {
	return (&CookingHistoryClient{config: ch.config}).QueryRecipe(ch)
}

// Update returns a builder for updating this CookingHistory.
// Note that you need to call CookingHistory.Unwrap() before calling this method if this CookingHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ch *CookingHistory) Update() *CookingHistoryUpdateOne {
	return (&CookingHistoryClient{config: ch.config}).UpdateOne(ch)
}

// Unwrap unwraps the CookingHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ch *CookingHistory) Unwrap() *CookingHistory {
	tx, ok := ch.config.driver.(*txDriver)
	if !ok {
		panic("ent: CookingHistory is not a transactional entity")
	}
	ch.config.driver = tx.drv
	return ch
}

// String implements the fmt.Stringer.
func (ch *CookingHistory) String() string {
	var builder strings.Builder
	builder.WriteString("CookingHistory(")
	builder.WriteString(fmt.Sprintf("id=%v", ch.ID))
	builder.WriteString(", cookedAt=")
	builder.WriteString(ch.CookedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CookingHistories is a parsable slice of CookingHistory.
type CookingHistories []*CookingHistory

func (ch CookingHistories) config(cfg config) {
	for _i := range ch {
		ch[_i].config = cfg
	}
}
